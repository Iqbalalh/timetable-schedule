// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Faculty {
  id          Int          @id @default(autoincrement())
  facultyName String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]

  @@map(name: "faculties")
}

model Department {
  id             Int            @id @default(autoincrement())
  departmentName String
  facultyId      Int
  faculty        Faculty        @relation(fields: [facultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  studyPrograms  StudyProgram[]
  rooms          Room[]
  lecturers      Lecturer[]

  @@map(name: "departments")
}

model StudyProgram {
  id                  Int                 @id @default(autoincrement())
  studyProgramName    String
  departmentId        Int
  department          Department          @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  subjects            Subject[]
  studyProgramClasses StudyProgramClass[]

  @@map(name: "studyPrograms")
}

model Curriculum {
  id              Int              @id @default(autoincrement())
  curriculumName  String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  subjects        Subject[]
  academicPeriods AcademicPeriod[]

  @@map(name: "curriculums")
}

model SemesterType {
  id              Int              @id @default(autoincrement())
  typeName        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  semesters       Semester[]
  academicPeriods AcademicPeriod[]

  @@map(name: "semesterTypes")
}

model Semester {
  id             Int          @id @default(autoincrement())
  semesterName   Int
  semesterTypeId Int
  semesterType   SemesterType @relation(fields: [semesterTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subjects       Subject[]
  assistants     Assistant[]

  @@map(name: "semesters")
}

model StudyProgramClass {
  id             Int          @id @default(autoincrement())
  className      String
  studyProgramId Int
  studyProgram   StudyProgram @relation(fields: [studyProgramId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  assistants     Assistant[]
  classes        Class[]

  @@map(name: "studyProgramClasses")
}

model Subject {
  id              Int          @id @default(autoincrement())
  subjectCode     String
  subjectName     String
  subjectSKS      Int
  subjectCategory String
  curriculumId    Int
  curriculum      Curriculum   @relation(fields: [curriculumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studyProgramId  Int
  studyProgram    StudyProgram @relation(fields: [studyProgramId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  semesterId      Int
  semester        Semester     @relation(fields: [semesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  subSubjects     SubSubject[]

  @@map(name: "subjects")
}

model SubjectType {
  id          Int          @id @default(autoincrement())
  typeName    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  subSubjects SubSubject[]

  @@map(name: "subjectTypes")
}

model SubSubject {
  id            Int         @id @default(autoincrement())
  subjectTypeId Int
  subjectType   SubjectType @relation(fields: [subjectTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjectId     Int
  subject       Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  classes       Class[]

  @@map(name: "subSubjects")
}

model Room {
  id           Int        @id @default(autoincrement())
  roomName     String
  roomCapacity Int
  isPracticum  Boolean
  isTheory     Boolean
  isResponse   Boolean
  roomType     String
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  schedules    Schedule[]

  @@map(name: "rooms")
}

model AcademicPeriod {
  id             Int          @id @default(autoincrement())
  academicYear   Int
  curriculumId   Int
  curriculum     Curriculum   @relation(fields: [curriculumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  semesterTypeId Int
  semesterType   SemesterType @relation(fields: [semesterTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  classes        Class[]

  @@map(name: "academicPeriods")
}

model Class {
  id                  Int               @id @default(autoincrement())
  classCapacity       Int
  studyProgramClassId Int
  studyProgramClass   StudyProgramClass @relation(fields: [studyProgramClassId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subSubjectId        Int
  subSubject          SubSubject        @relation(fields: [subSubjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  academicPeriodId    Int
  academicPeriod      AcademicPeriod    @relation(fields: [academicPeriodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  classLecturers      ClassLecturer[] // Relasi ke ClassLecturer

  @@map(name: "classes")
}

model Assistant {
  id                      Int               @id @default(autoincrement())
  assistantName           String
  assistantNPM            String
  semesterId              Int
  semester                Semester          @relation(fields: [semesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studyProgramClassId     Int
  studyProgramClass       StudyProgramClass @relation(fields: [studyProgramClassId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  classLecturersPrimary   ClassLecturer[]   @relation("PrimaryAssistant")
  classLecturersSecondary ClassLecturer[]   @relation("SecondaryAssistant")

  @@map(name: "assistants")
}

model Lecturer {
  id                      Int             @id @default(autoincrement())
  lecturerName            String
  lecturerNIP             String?
  lecturerEmail           String?
  departmentId            Int?
  department              Department?     @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  classLecturersPrimary   ClassLecturer[] @relation("PrimaryLecturer")
  classLecturersSecondary ClassLecturer[] @relation("SecondaryLecturer")
  users                   User[]

  @@map(name: "lecturers")
}

model ClassLecturer {
  id                   Int        @id @default(autoincrement())
  classId              Int
  class                Class      @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  primaryLecturerId    Int
  primaryLecturer      Lecturer   @relation(name: "PrimaryLecturer", fields: [primaryLecturerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  secondaryLecturerId  Int?
  secondaryLecturer    Lecturer?  @relation(name: "SecondaryLecturer", fields: [secondaryLecturerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  primaryAssistantId   Int?
  primaryAssistant     Assistant? @relation(name: "PrimaryAssistant", fields: [primaryAssistantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  secondaryAssistantId Int?
  secondaryAssistant   Assistant? @relation(name: "SecondaryAssistant", fields: [secondaryAssistantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  schedules            Schedule[]

  @@map(name: "classLecturers")
}

model User {
  id         String   @id @default(cuid())
  username   String   @unique
  password   String
  role       String
  lecturerId Int
  lecturer   Lecturer @relation(fields: [lecturerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map(name: "users")
}

model ScheduleSession {
  id            Int        @id @default(autoincrement())
  startTime     String
  endTime       String
  sessionNumber Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  schedules     Schedule[]

  @@map(name: "scheduleSessions")
}

model ScheduleDay {
  id        Int        @id @default(autoincrement())
  day       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  schedules Schedule[]

  @@map(name: "scheduleDays")
}

model Schedule {
  id                Int             @id @default(autoincrement())
  scheduleDayId     Int
  scheduleDay       ScheduleDay     @relation(fields: [scheduleDayId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classLecturerId   Int
  classLecturer     ClassLecturer   @relation(fields: [classLecturerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scheduleSessionId Int
  scheduleSession   ScheduleSession @relation(fields: [scheduleSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId            Int
  room              Room            @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map(name: "schedules")
}
